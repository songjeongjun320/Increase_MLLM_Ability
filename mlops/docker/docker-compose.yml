# Docker Compose for ToW MLOps Infrastructure
# Complete development and testing environment

version: '3.8'

services:
  # PostgreSQL database for experiment tracking
  postgres:
    image: postgres:15
    container_name: tow-postgres
    environment:
      POSTGRES_DB: tow_experiments
      POSTGRES_USER: tow_user
      POSTGRES_PASSWORD: tow_password
    volumes:
      - postgres_data:/var/lib/postgresql/data
      - ./scripts/init-db.sql:/docker-entrypoint-initdb.d/init-db.sql
    ports:
      - "5432:5432"
    networks:
      - tow-network
    healthcheck:
      test: ["CMD-SHELL", "pg_isready -U tow_user -d tow_experiments"]
      interval: 10s
      timeout: 5s
      retries: 5

  # Redis for caching and session storage
  redis:
    image: redis:7-alpine
    container_name: tow-redis
    command: redis-server --appendonly yes --requirepass tow_redis_password
    volumes:
      - redis_data:/data
    ports:
      - "6379:6379"
    networks:
      - tow-network
    healthcheck:
      test: ["CMD", "redis-cli", "--raw", "incr", "ping"]
      interval: 10s
      timeout: 3s
      retries: 5

  # MLflow tracking server
  mlflow:
    image: mlflow/mlflow:latest
    container_name: tow-mlflow
    command: >
      mlflow server 
      --backend-store-uri postgresql://tow_user:tow_password@postgres:5432/tow_experiments
      --default-artifact-root ./mlartifacts
      --host 0.0.0.0
      --port 5000
    volumes:
      - mlflow_artifacts:/mlflow/mlartifacts
    ports:
      - "5000:5000"
    networks:
      - tow-network
    depends_on:
      postgres:
        condition: service_healthy
    environment:
      MLFLOW_S3_ENDPOINT_URL: http://minio:9000
      AWS_ACCESS_KEY_ID: minio_access_key
      AWS_SECRET_ACCESS_KEY: minio_secret_key

  # MinIO for artifact storage (S3-compatible)
  minio:
    image: minio/minio:latest
    container_name: tow-minio
    command: server /data --console-address ":9001"
    environment:
      MINIO_ROOT_USER: minio_access_key
      MINIO_ROOT_PASSWORD: minio_secret_key
    volumes:
      - minio_data:/data
    ports:
      - "9000:9000"
      - "9001:9001"
    networks:
      - tow-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:9000/minio/health/live"]
      interval: 30s
      timeout: 20s
      retries: 3

  # Prometheus for metrics collection
  prometheus:
    image: prom/prometheus:latest
    container_name: tow-prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    volumes:
      - ./configs/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    ports:
      - "9090:9090"
    networks:
      - tow-network

  # Grafana for metrics visualization
  grafana:
    image: grafana/grafana:latest
    container_name: tow-grafana
    environment:
      GF_SECURITY_ADMIN_PASSWORD: tow_grafana_password
      GF_INSTALL_PLUGINS: grafana-piechart-panel
    volumes:
      - grafana_data:/var/lib/grafana
      - ./configs/grafana/dashboards:/etc/grafana/provisioning/dashboards
      - ./configs/grafana/datasources:/etc/grafana/provisioning/datasources
    ports:
      - "3000:3000"
    networks:
      - tow-network
    depends_on:
      - prometheus

  # ToW Model Server
  tow-model-server:
    build:
      context: ../../
      dockerfile: mlops/docker/Dockerfile.model-server
    container_name: tow-model-server
    environment:
      MLOPS_ENV: development
      DATABASE_URL: postgresql://tow_user:tow_password@postgres:5432/tow_experiments
      REDIS_URL: redis://:tow_redis_password@redis:6379/0
      MLFLOW_TRACKING_URI: http://mlflow:5000
      MODEL_SERVER_PORT: 8000
      MODEL_SERVER_HOST: 0.0.0.0
    volumes:
      - model_cache:/app/models
      - ./logs:/app/logs
    ports:
      - "8000:8000"
    networks:
      - tow-network
    depends_on:
      postgres:
        condition: service_healthy
      redis:
        condition: service_healthy
      mlflow:
        condition: service_started
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: 1
              capabilities: [gpu]
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8000/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Training Pipeline (optional, for development)
  tow-training:
    build:
      context: ../../
      dockerfile: mlops/docker/Dockerfile.training
    container_name: tow-training
    environment:
      MLOPS_ENV: development
      WANDB_API_KEY: ${WANDB_API_KEY:-}
      MLFLOW_TRACKING_URI: http://mlflow:5000
      CUDA_VISIBLE_DEVICES: 0
    volumes:
      - training_data:/workspace/data
      - training_models:/workspace/models
      - training_logs:/workspace/logs
      - training_checkpoints:/workspace/checkpoints
    networks:
      - tow-network
    depends_on:
      mlflow:
        condition: service_started
    deploy:
      resources:
        reservations:
          devices:
            - driver: nvidia
              count: all
              capabilities: [gpu]
    profiles:
      - training  # Only start with --profile training

  # Jupyter notebook for development and experimentation
  jupyter:
    image: jupyter/tensorflow-notebook:latest
    container_name: tow-jupyter
    environment:
      JUPYTER_ENABLE_LAB: "yes"
      JUPYTER_TOKEN: tow_jupyter_token
    volumes:
      - jupyter_data:/home/jovyan/work
      - ../../:/home/jovyan/work/tow-project
    ports:
      - "8888:8888"
    networks:
      - tow-network
    profiles:
      - development

  # Monitoring and alerting
  alertmanager:
    image: prom/alertmanager:latest
    container_name: tow-alertmanager
    command:
      - '--config.file=/etc/alertmanager/config.yml'
      - '--storage.path=/alertmanager'
    volumes:
      - ./configs/alertmanager.yml:/etc/alertmanager/config.yml
      - alertmanager_data:/alertmanager
    ports:
      - "9093:9093"
    networks:
      - tow-network

  # Node Exporter for system metrics
  node-exporter:
    image: prom/node-exporter:latest
    container_name: tow-node-exporter
    command:
      - '--path.rootfs=/host'
    volumes:
      - '/:/host:ro'
    ports:
      - "9100:9100"
    networks:
      - tow-network

  # cadvisor for container metrics
  cadvisor:
    image: gcr.io/cadvisor/cadvisor:latest
    container_name: tow-cadvisor
    privileged: true
    devices:
      - /dev/kmsg:/dev/kmsg
    volumes:
      - /:/rootfs:ro
      - /var/run:/var/run:ro
      - /sys:/sys:ro
      - /var/lib/docker/:/var/lib/docker:ro
      - /cgroup:/cgroup:ro
    ports:
      - "8080:8080"
    networks:
      - tow-network

networks:
  tow-network:
    driver: bridge

volumes:
  postgres_data:
  redis_data:
  mlflow_artifacts:
  minio_data:
  prometheus_data:
  grafana_data:
  model_cache:
  training_data:
  training_models:
  training_logs:
  training_checkpoints:
  jupyter_data:
  alertmanager_data: